"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.walk = exports.cstToAst = exports.toLiquidHtmlAST = exports.isBranchedTag = exports.RawMarkupKinds = void 0;
const stage_1_cst_1 = require("../parser/stage-1-cst");
const types_1 = require("../types");
const utils_1 = require("../utils");
const errors_1 = require("../parser/errors");
const grammar_1 = require("../parser/grammar");
var RawMarkupKinds;
(function (RawMarkupKinds) {
    RawMarkupKinds["css"] = "css";
    RawMarkupKinds["html"] = "html";
    RawMarkupKinds["javascript"] = "javascript";
    RawMarkupKinds["json"] = "json";
    RawMarkupKinds["markdown"] = "markdown";
    RawMarkupKinds["typescript"] = "typescript";
    RawMarkupKinds["text"] = "text";
})(RawMarkupKinds = exports.RawMarkupKinds || (exports.RawMarkupKinds = {}));
function isBranchedTag(node) {
    return (node.type === types_1.NodeTypes.LiquidTag &&
        ['if', 'for', 'unless', 'case'].includes(node.name));
}
exports.isBranchedTag = isBranchedTag;
function isLiquidBranchDisguisedAsTag(node) {
    return (node.type === types_1.NodeTypes.LiquidTag &&
        ['else', 'elsif', 'when'].includes(node.name));
}
function toLiquidHtmlAST(source) {
    const cst = (0, stage_1_cst_1.toLiquidHtmlCST)(source);
    const root = {
        type: types_1.NodeTypes.Document,
        source: source,
        children: cstToAst(cst),
        name: '#document',
        position: {
            start: 0,
            end: source.length,
        },
    };
    return root;
}
exports.toLiquidHtmlAST = toLiquidHtmlAST;
class ASTBuilder {
    constructor(source) {
        this.ast = [];
        this.cursor = [];
        this.source = source;
    }
    get current() {
        return (0, utils_1.deepGet)(this.cursor, this.ast);
    }
    get currentPosition() {
        return (this.current || []).length - 1;
    }
    get parent() {
        if (this.cursor.length == 0)
            return undefined;
        return (0, utils_1.deepGet)((0, utils_1.dropLast)(1, this.cursor), this.ast);
    }
    open(node) {
        this.current.push(node);
        this.cursor.push(this.currentPosition);
        this.cursor.push('children');
        if (isBranchedTag(node)) {
            this.open(toUnnamedLiquidBranch(node));
        }
    }
    push(node) {
        var _a;
        if (node.type === types_1.NodeTypes.LiquidTag &&
            isLiquidBranchDisguisedAsTag(node)) {
            this.cursor.pop();
            this.cursor.pop();
            this.open(toNamedLiquidBranchBaseCase(node));
        }
        else if (node.type === types_1.NodeTypes.LiquidBranch) {
            this.cursor.pop();
            this.cursor.pop();
            this.open(node);
        }
        else {
            if (((_a = this.parent) === null || _a === void 0 ? void 0 : _a.type) === types_1.NodeTypes.LiquidBranch) {
                this.parent.position.end = node.position.end;
            }
            this.current.push(node);
        }
    }
    close(node, nodeType) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        if (((_a = this.parent) === null || _a === void 0 ? void 0 : _a.type) === types_1.NodeTypes.LiquidBranch) {
            this.parent.position.end = node.locStart;
            this.cursor.pop();
            this.cursor.pop();
        }
        if (getName(this.parent) !== getName(node) ||
            ((_b = this.parent) === null || _b === void 0 ? void 0 : _b.type) !== nodeType) {
            throw new errors_1.LiquidHTMLASTParsingError(`Attempting to close ${nodeType} '${node.name}' before ${(_c = this.parent) === null || _c === void 0 ? void 0 : _c.type} '${(_d = this.parent) === null || _d === void 0 ? void 0 : _d.name}' was closed`, this.source, ((_f = (_e = this.parent) === null || _e === void 0 ? void 0 : _e.position) === null || _f === void 0 ? void 0 : _f.start) || 0, node.locEnd);
        }
        this.parent.position.end = node.locEnd;
        this.parent.blockEndPosition = position(node);
        if (this.parent.type == types_1.NodeTypes.LiquidTag &&
            node.type == stage_1_cst_1.ConcreteNodeTypes.LiquidTagClose) {
            this.parent.delimiterWhitespaceStart = (_g = node.whitespaceStart) !== null && _g !== void 0 ? _g : '';
            this.parent.delimiterWhitespaceEnd = (_h = node.whitespaceEnd) !== null && _h !== void 0 ? _h : '';
        }
        this.cursor.pop();
        this.cursor.pop();
    }
}
function getName(node) {
    if (!node)
        return null;
    switch (node.type) {
        case types_1.NodeTypes.HtmlElement:
        case stage_1_cst_1.ConcreteNodeTypes.HtmlTagClose:
            if (typeof node.name === 'string') {
                return node.name;
            }
            else if (typeof node.name.markup === 'string') {
                return `{{${node.name.markup.trim()}}}`;
            }
            else {
                return `{{${node.name.markup.rawSource}}}`;
            }
        case types_1.NodeTypes.AttrUnquoted:
        case types_1.NodeTypes.AttrDoubleQuoted:
        case types_1.NodeTypes.AttrSingleQuoted:
            return node.name
                .map((part) => {
                if (typeof part === 'string') {
                    return part;
                }
                else {
                    return part.source.slice(part.position.start, part.position.end);
                }
            })
                .join('');
        default:
            return node.name;
    }
}
function cstToAst(cst) {
    var _a, _b, _c, _d;
    if (cst.length === 0)
        return [];
    const builder = new ASTBuilder(cst[0].source);
    for (const node of cst) {
        switch (node.type) {
            case stage_1_cst_1.ConcreteNodeTypes.TextNode: {
                builder.push({
                    type: types_1.NodeTypes.TextNode,
                    value: node.value,
                    position: position(node),
                    source: node.source,
                });
                break;
            }
            case stage_1_cst_1.ConcreteNodeTypes.LiquidDrop: {
                builder.push(toLiquidDrop(node));
                break;
            }
            case stage_1_cst_1.ConcreteNodeTypes.LiquidTagOpen: {
                builder.open(toLiquidTag(node, { isBlockTag: true }));
                break;
            }
            case stage_1_cst_1.ConcreteNodeTypes.LiquidTagClose: {
                builder.close(node, types_1.NodeTypes.LiquidTag);
                break;
            }
            case stage_1_cst_1.ConcreteNodeTypes.LiquidTag: {
                builder.push(toLiquidTag(node));
                break;
            }
            case stage_1_cst_1.ConcreteNodeTypes.LiquidRawTag: {
                builder.push({
                    type: types_1.NodeTypes.LiquidRawTag,
                    markup: markup(node.name, node.markup),
                    name: node.name,
                    body: toRawMarkup(node),
                    whitespaceStart: (_a = node.whitespaceStart) !== null && _a !== void 0 ? _a : '',
                    whitespaceEnd: (_b = node.whitespaceEnd) !== null && _b !== void 0 ? _b : '',
                    delimiterWhitespaceStart: (_c = node.delimiterWhitespaceStart) !== null && _c !== void 0 ? _c : '',
                    delimiterWhitespaceEnd: (_d = node.delimiterWhitespaceEnd) !== null && _d !== void 0 ? _d : '',
                    position: position(node),
                    blockStartPosition: {
                        start: node.blockStartLocStart,
                        end: node.blockStartLocEnd,
                    },
                    blockEndPosition: {
                        start: node.blockEndLocStart,
                        end: node.blockEndLocEnd,
                    },
                    source: node.source,
                });
                break;
            }
            case stage_1_cst_1.ConcreteNodeTypes.HtmlTagOpen: {
                builder.open(toHtmlElement(node));
                break;
            }
            case stage_1_cst_1.ConcreteNodeTypes.HtmlTagClose: {
                builder.close(node, types_1.NodeTypes.HtmlElement);
                break;
            }
            case stage_1_cst_1.ConcreteNodeTypes.HtmlVoidElement: {
                builder.push(toHtmlVoidElement(node));
                break;
            }
            case stage_1_cst_1.ConcreteNodeTypes.HtmlSelfClosingElement: {
                builder.push(toHtmlSelfClosingElement(node));
                break;
            }
            case stage_1_cst_1.ConcreteNodeTypes.HtmlDoctype: {
                builder.push({
                    type: types_1.NodeTypes.HtmlDoctype,
                    legacyDoctypeString: node.legacyDoctypeString,
                    position: position(node),
                    source: node.source,
                });
                break;
            }
            case stage_1_cst_1.ConcreteNodeTypes.HtmlComment: {
                builder.push({
                    type: types_1.NodeTypes.HtmlComment,
                    body: node.body,
                    position: position(node),
                    source: node.source,
                });
                break;
            }
            case stage_1_cst_1.ConcreteNodeTypes.HtmlRawTag: {
                builder.push({
                    type: types_1.NodeTypes.HtmlRawNode,
                    name: node.name,
                    body: toRawMarkup(node),
                    attributes: toAttributes(node.attrList || []),
                    position: position(node),
                    source: node.source,
                    blockStartPosition: {
                        start: node.blockStartLocStart,
                        end: node.blockStartLocEnd,
                    },
                    blockEndPosition: {
                        start: node.blockEndLocStart,
                        end: node.blockEndLocEnd,
                    },
                });
                break;
            }
            case stage_1_cst_1.ConcreteNodeTypes.AttrEmpty: {
                builder.push({
                    type: types_1.NodeTypes.AttrEmpty,
                    name: toAttributeName(node.name),
                    position: position(node),
                    source: node.source,
                });
                break;
            }
            case stage_1_cst_1.ConcreteNodeTypes.AttrSingleQuoted:
            case stage_1_cst_1.ConcreteNodeTypes.AttrDoubleQuoted:
            case stage_1_cst_1.ConcreteNodeTypes.AttrUnquoted: {
                const abstractNode = {
                    type: node.type,
                    name: toAttributeName(node.name),
                    position: position(node),
                    source: node.source,
                    attributePosition: { start: -1, end: -1 },
                    value: [],
                };
                const value = toAttributeValue(node.value);
                abstractNode.value = value;
                abstractNode.attributePosition = toAttributePosition(node, value);
                builder.push(abstractNode);
                break;
            }
            case stage_1_cst_1.ConcreteNodeTypes.YAMLFrontmatter: {
                builder.push({
                    type: types_1.NodeTypes.YAMLFrontmatter,
                    body: node.body,
                    position: position(node),
                    source: node.source,
                });
                break;
            }
            default: {
                (0, utils_1.assertNever)(node);
            }
        }
    }
    return builder.ast;
}
exports.cstToAst = cstToAst;
function toAttributeName(nameArray) {
    return nameArray.map((part) => {
        if (typeof part === 'string') {
            return part;
        }
        else {
            return toLiquidDrop(part);
        }
    });
}
function toAttributePosition(node, value) {
    if (value.length === 0) {
        return {
            start: node.locStart + node.name.length + '='.length + '"'.length,
            end: node.locStart + node.name.length + '='.length + '"'.length,
        };
    }
    return {
        start: value[0].position.start,
        end: value[value.length - 1].position.end,
    };
}
function toAttributeValue(value) {
    return cstToAst(value);
}
function toAttributes(attrList) {
    return cstToAst(attrList);
}
function toName(name) {
    if (typeof name === 'string')
        return name;
    return toLiquidDrop(name);
}
function liquidTagBaseAttributes(node) {
    var _a, _b;
    return {
        type: types_1.NodeTypes.LiquidTag,
        position: position(node),
        whitespaceStart: (_a = node.whitespaceStart) !== null && _a !== void 0 ? _a : '',
        whitespaceEnd: (_b = node.whitespaceEnd) !== null && _b !== void 0 ? _b : '',
        blockStartPosition: position(node),
        source: node.source,
    };
}
function liquidBranchBaseAttributes(node) {
    var _a, _b;
    return {
        type: types_1.NodeTypes.LiquidBranch,
        children: [],
        position: position(node),
        whitespaceStart: (_a = node.whitespaceStart) !== null && _a !== void 0 ? _a : '',
        whitespaceEnd: (_b = node.whitespaceEnd) !== null && _b !== void 0 ? _b : '',
        blockStartPosition: position(node),
        source: node.source,
    };
}
function toLiquidTag(node, { isBlockTag } = { isBlockTag: false }) {
    if (typeof node.markup !== 'string') {
        return toNamedLiquidTag(node);
    }
    else if (isBlockTag) {
        return Object.assign({ name: node.name, markup: markup(node.name, node.markup), children: isBlockTag ? [] : undefined }, liquidTagBaseAttributes(node));
    }
    return Object.assign({ name: node.name, markup: markup(node.name, node.markup) }, liquidTagBaseAttributes(node));
}
function toNamedLiquidTag(node) {
    switch (node.name) {
        case types_1.NamedTags.echo: {
            return Object.assign(Object.assign({}, liquidTagBaseAttributes(node)), { name: types_1.NamedTags.echo, markup: toLiquidVariable(node.markup) });
        }
        case types_1.NamedTags.assign: {
            return Object.assign(Object.assign({}, liquidTagBaseAttributes(node)), { name: types_1.NamedTags.assign, markup: toAssignMarkup(node.markup) });
        }
        case types_1.NamedTags.cycle: {
            return Object.assign(Object.assign({}, liquidTagBaseAttributes(node)), { name: node.name, markup: toCycleMarkup(node.markup) });
        }
        case types_1.NamedTags.increment:
        case types_1.NamedTags.decrement: {
            return Object.assign(Object.assign({}, liquidTagBaseAttributes(node)), { name: node.name, markup: toExpression(node.markup) });
        }
        case types_1.NamedTags.capture: {
            return Object.assign(Object.assign({}, liquidTagBaseAttributes(node)), { name: node.name, markup: toExpression(node.markup), children: [] });
        }
        case types_1.NamedTags.include:
        case types_1.NamedTags.render: {
            return Object.assign(Object.assign({}, liquidTagBaseAttributes(node)), { name: node.name, markup: toRenderMarkup(node.markup) });
        }
        case types_1.NamedTags.layout:
        case types_1.NamedTags.section: {
            return Object.assign(Object.assign({}, liquidTagBaseAttributes(node)), { name: node.name, markup: toExpression(node.markup) });
        }
        case types_1.NamedTags.form: {
            return Object.assign(Object.assign({}, liquidTagBaseAttributes(node)), { name: node.name, markup: node.markup.map(toLiquidArgument), children: [] });
        }
        case types_1.NamedTags.tablerow:
        case types_1.NamedTags.for: {
            return Object.assign(Object.assign({}, liquidTagBaseAttributes(node)), { name: node.name, markup: toForMarkup(node.markup), children: [] });
        }
        case types_1.NamedTags.paginate: {
            return Object.assign(Object.assign({}, liquidTagBaseAttributes(node)), { name: node.name, markup: toPaginateMarkup(node.markup), children: [] });
        }
        case types_1.NamedTags.if:
        case types_1.NamedTags.unless: {
            return Object.assign(Object.assign({}, liquidTagBaseAttributes(node)), { name: node.name, markup: toConditionalExpression(node.markup), children: [] });
        }
        case types_1.NamedTags.elsif: {
            return Object.assign(Object.assign({}, liquidBranchBaseAttributes(node)), { name: node.name, markup: toConditionalExpression(node.markup) });
        }
        case types_1.NamedTags.case: {
            return Object.assign(Object.assign({}, liquidTagBaseAttributes(node)), { name: node.name, markup: toExpression(node.markup), children: [] });
        }
        case types_1.NamedTags.when: {
            return Object.assign(Object.assign({}, liquidBranchBaseAttributes(node)), { name: node.name, markup: node.markup.map(toExpression) });
        }
        case types_1.NamedTags.liquid: {
            return Object.assign(Object.assign({}, liquidTagBaseAttributes(node)), { name: node.name, markup: cstToAst(node.markup) });
        }
        default: {
            return (0, utils_1.assertNever)(node);
        }
    }
}
function toNamedLiquidBranchBaseCase(node) {
    return {
        name: node.name,
        type: types_1.NodeTypes.LiquidBranch,
        markup: node.markup,
        position: Object.assign({}, node.position),
        children: [],
        blockStartPosition: Object.assign({}, node.position),
        whitespaceStart: node.whitespaceStart,
        whitespaceEnd: node.whitespaceEnd,
        source: node.source,
    };
}
function toUnnamedLiquidBranch(parentNode) {
    return {
        type: types_1.NodeTypes.LiquidBranch,
        name: null,
        markup: '',
        position: {
            start: parentNode.position.end,
            end: parentNode.position.end,
        },
        blockStartPosition: {
            start: parentNode.position.end,
            end: parentNode.position.end,
        },
        children: [],
        whitespaceStart: '',
        whitespaceEnd: '',
        source: parentNode.source,
    };
}
function toAssignMarkup(node) {
    return {
        type: types_1.NodeTypes.AssignMarkup,
        name: node.name,
        value: toLiquidVariable(node.value),
        position: position(node),
        source: node.source,
    };
}
function toCycleMarkup(node) {
    return {
        type: types_1.NodeTypes.CycleMarkup,
        groupName: node.groupName ? toExpression(node.groupName) : null,
        args: node.args.map(toExpression),
        position: position(node),
        source: node.source,
    };
}
function toForMarkup(node) {
    return {
        type: types_1.NodeTypes.ForMarkup,
        variableName: node.variableName,
        collection: toExpression(node.collection),
        args: node.args.map(toNamedArgument),
        reversed: !!node.reversed,
        position: position(node),
        source: node.source,
    };
}
function toPaginateMarkup(node) {
    return {
        type: types_1.NodeTypes.PaginateMarkup,
        collection: toExpression(node.collection),
        pageSize: toExpression(node.pageSize),
        position: position(node),
        args: node.args ? node.args.map(toNamedArgument) : [],
        source: node.source,
    };
}
function toRawMarkup(node) {
    return {
        type: types_1.NodeTypes.RawMarkup,
        kind: toRawMarkupKind(node),
        value: node.body,
        position: {
            start: node.blockStartLocEnd,
            end: node.blockEndLocStart,
        },
        source: node.source,
    };
}
function toRawMarkupKind(node) {
    switch (node.type) {
        case stage_1_cst_1.ConcreteNodeTypes.HtmlRawTag:
            return toRawMarkupKindFromHtmlNode(node);
        case stage_1_cst_1.ConcreteNodeTypes.LiquidRawTag:
            return toRawMarkupKindFromLiquidNode(node);
        default:
            return (0, utils_1.assertNever)(node);
    }
}
const liquidToken = /(\{%|\{\{)-?/g;
function toRawMarkupKindFromHtmlNode(node) {
    var _a;
    switch (node.name) {
        case 'script': {
            const scriptAttr = (_a = node.attrList) === null || _a === void 0 ? void 0 : _a.find((attr) => 'name' in attr &&
                typeof attr.name !== 'string' &&
                attr.name.length === 1 &&
                attr.name[0] === 'type');
            if (!scriptAttr ||
                !('value' in scriptAttr) ||
                scriptAttr.value.length === 0 ||
                scriptAttr.value[0].type !== stage_1_cst_1.ConcreteNodeTypes.TextNode) {
                return RawMarkupKinds.javascript;
            }
            const type = scriptAttr.value[0].value;
            if (type === 'text/markdown') {
                return RawMarkupKinds.markdown;
            }
            if (type === 'application/x-typescript') {
                return RawMarkupKinds.typescript;
            }
            if (type === 'text/html') {
                return RawMarkupKinds.html;
            }
            if ((type && (type.endsWith('json') || type.endsWith('importmap'))) ||
                type === 'speculationrules') {
                return RawMarkupKinds.json;
            }
            return RawMarkupKinds.javascript;
        }
        case 'style':
            if (liquidToken.test(node.body)) {
                return RawMarkupKinds.text;
            }
            return RawMarkupKinds.css;
        default:
            return RawMarkupKinds.text;
    }
}
function toRawMarkupKindFromLiquidNode(node) {
    switch (node.name) {
        case 'javascript':
            return RawMarkupKinds.javascript;
        case 'stylesheet':
        case 'style':
            if (liquidToken.test(node.body)) {
                return RawMarkupKinds.text;
            }
            return RawMarkupKinds.css;
        case 'schema':
            return RawMarkupKinds.json;
        default:
            return RawMarkupKinds.text;
    }
}
function toRenderMarkup(node) {
    return {
        type: types_1.NodeTypes.RenderMarkup,
        snippet: toExpression(node.snippet),
        alias: node.alias,
        variable: toRenderVariableExpression(node.variable),
        args: node.args.map(toNamedArgument),
        position: position(node),
        source: node.source,
    };
}
function toRenderVariableExpression(node) {
    if (!node)
        return null;
    return {
        type: types_1.NodeTypes.RenderVariableExpression,
        kind: node.kind,
        name: toExpression(node.name),
        position: position(node),
        source: node.source,
    };
}
function toConditionalExpression(nodes) {
    if (nodes.length === 1) {
        return toComparisonOrExpression(nodes[0]);
    }
    const [first, second] = nodes;
    const [, ...rest] = nodes;
    return {
        type: types_1.NodeTypes.LogicalExpression,
        relation: second.relation,
        left: toComparisonOrExpression(first),
        right: toConditionalExpression(rest),
        position: {
            start: first.locStart,
            end: nodes[nodes.length - 1].locEnd,
        },
        source: first.source,
    };
}
function toComparisonOrExpression(node) {
    const expression = node.expression;
    switch (expression.type) {
        case stage_1_cst_1.ConcreteNodeTypes.Comparison:
            return toComparison(expression);
        default:
            return toExpression(expression);
    }
}
function toComparison(node) {
    return {
        type: types_1.NodeTypes.Comparison,
        comparator: node.comparator,
        left: toExpression(node.left),
        right: toExpression(node.right),
        position: position(node),
        source: node.source,
    };
}
function toLiquidDrop(node) {
    var _a, _b;
    return {
        type: types_1.NodeTypes.LiquidDrop,
        markup: typeof node.markup === 'string'
            ? node.markup
            : toLiquidVariable(node.markup),
        whitespaceStart: (_a = node.whitespaceStart) !== null && _a !== void 0 ? _a : '',
        whitespaceEnd: (_b = node.whitespaceEnd) !== null && _b !== void 0 ? _b : '',
        position: position(node),
        source: node.source,
    };
}
function toLiquidVariable(node) {
    return {
        type: types_1.NodeTypes.LiquidVariable,
        expression: toExpression(node.expression),
        filters: node.filters.map(toFilter),
        position: position(node),
        rawSource: node.rawSource,
        source: node.source,
    };
}
function toExpression(node) {
    switch (node.type) {
        case stage_1_cst_1.ConcreteNodeTypes.String: {
            return {
                type: types_1.NodeTypes.String,
                position: position(node),
                single: node.single,
                value: node.value,
                source: node.source,
            };
        }
        case stage_1_cst_1.ConcreteNodeTypes.Number: {
            return {
                type: types_1.NodeTypes.Number,
                position: position(node),
                value: node.value,
                source: node.source,
            };
        }
        case stage_1_cst_1.ConcreteNodeTypes.LiquidLiteral: {
            return {
                type: types_1.NodeTypes.LiquidLiteral,
                position: position(node),
                value: node.value,
                keyword: node.keyword,
                source: node.source,
            };
        }
        case stage_1_cst_1.ConcreteNodeTypes.Range: {
            return {
                type: types_1.NodeTypes.Range,
                start: toExpression(node.start),
                end: toExpression(node.end),
                position: position(node),
                source: node.source,
            };
        }
        case stage_1_cst_1.ConcreteNodeTypes.VariableLookup: {
            return {
                type: types_1.NodeTypes.VariableLookup,
                name: node.name,
                lookups: node.lookups.map(toExpression),
                position: position(node),
                source: node.source,
            };
        }
        default: {
            return (0, utils_1.assertNever)(node);
        }
    }
}
function toFilter(node) {
    return {
        type: types_1.NodeTypes.LiquidFilter,
        name: node.name,
        args: node.args.map(toLiquidArgument),
        position: position(node),
        source: node.source,
    };
}
function toLiquidArgument(node) {
    switch (node.type) {
        case stage_1_cst_1.ConcreteNodeTypes.NamedArgument: {
            return toNamedArgument(node);
        }
        default: {
            return toExpression(node);
        }
    }
}
function toNamedArgument(node) {
    return {
        type: types_1.NodeTypes.NamedArgument,
        name: node.name,
        value: toExpression(node.value),
        position: position(node),
        source: node.source,
    };
}
function toHtmlElement(node) {
    return {
        type: types_1.NodeTypes.HtmlElement,
        name: toName(node.name),
        attributes: toAttributes(node.attrList || []),
        position: position(node),
        blockStartPosition: position(node),
        blockEndPosition: { start: -1, end: -1 },
        children: [],
        source: node.source,
    };
}
function toHtmlVoidElement(node) {
    return {
        type: types_1.NodeTypes.HtmlVoidElement,
        name: node.name,
        attributes: toAttributes(node.attrList || []),
        position: position(node),
        blockStartPosition: position(node),
        source: node.source,
    };
}
function toHtmlSelfClosingElement(node) {
    return {
        type: types_1.NodeTypes.HtmlSelfClosingElement,
        name: toName(node.name),
        attributes: toAttributes(node.attrList || []),
        position: position(node),
        blockStartPosition: position(node),
        source: node.source,
    };
}
function markup(name, markup) {
    if (grammar_1.TAGS_WITHOUT_MARKUP.includes(name))
        return '';
    return markup;
}
function position(node) {
    return {
        start: node.locStart,
        end: node.locEnd,
    };
}
function walk(ast, fn, parentNode) {
    for (const key of Object.keys(ast)) {
        if (['parentNode', 'prev', 'next', 'firstChild', 'lastChild'].includes(key)) {
            continue;
        }
        const value = ast[key];
        if (Array.isArray(value)) {
            value
                .filter(types_1.isLiquidHtmlNode)
                .forEach((node) => walk(node, fn, ast));
        }
        else if ((0, types_1.isLiquidHtmlNode)(value)) {
            walk(value, fn, ast);
        }
    }
    fn(ast, parentNode);
}
exports.walk = walk;
//# sourceMappingURL=data:application/json;base64,